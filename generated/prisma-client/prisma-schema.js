module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCast {
  count: Int!
}

type AggregateMovie {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Cast {
  id: ID!
  name: String!
  lastName: String!
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie!]
}

type CastConnection {
  pageInfo: PageInfo!
  edges: [CastEdge]!
  aggregate: AggregateCast!
}

input CastCreateInput {
  id: ID
  name: String!
  lastName: String!
  movies: MovieCreateManyWithoutCastInput
}

input CastCreateManyWithoutMoviesInput {
  create: [CastCreateWithoutMoviesInput!]
  connect: [CastWhereUniqueInput!]
}

input CastCreateWithoutMoviesInput {
  id: ID
  name: String!
  lastName: String!
}

type CastEdge {
  node: Cast!
  cursor: String!
}

enum CastOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  lastName_ASC
  lastName_DESC
}

type CastPreviousValues {
  id: ID!
  name: String!
  lastName: String!
}

input CastScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  AND: [CastScalarWhereInput!]
  OR: [CastScalarWhereInput!]
  NOT: [CastScalarWhereInput!]
}

type CastSubscriptionPayload {
  mutation: MutationType!
  node: Cast
  updatedFields: [String!]
  previousValues: CastPreviousValues
}

input CastSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CastWhereInput
  AND: [CastSubscriptionWhereInput!]
  OR: [CastSubscriptionWhereInput!]
  NOT: [CastSubscriptionWhereInput!]
}

input CastUpdateInput {
  name: String
  lastName: String
  movies: MovieUpdateManyWithoutCastInput
}

input CastUpdateManyDataInput {
  name: String
  lastName: String
}

input CastUpdateManyMutationInput {
  name: String
  lastName: String
}

input CastUpdateManyWithoutMoviesInput {
  create: [CastCreateWithoutMoviesInput!]
  delete: [CastWhereUniqueInput!]
  connect: [CastWhereUniqueInput!]
  set: [CastWhereUniqueInput!]
  disconnect: [CastWhereUniqueInput!]
  update: [CastUpdateWithWhereUniqueWithoutMoviesInput!]
  upsert: [CastUpsertWithWhereUniqueWithoutMoviesInput!]
  deleteMany: [CastScalarWhereInput!]
  updateMany: [CastUpdateManyWithWhereNestedInput!]
}

input CastUpdateManyWithWhereNestedInput {
  where: CastScalarWhereInput!
  data: CastUpdateManyDataInput!
}

input CastUpdateWithoutMoviesDataInput {
  name: String
  lastName: String
}

input CastUpdateWithWhereUniqueWithoutMoviesInput {
  where: CastWhereUniqueInput!
  data: CastUpdateWithoutMoviesDataInput!
}

input CastUpsertWithWhereUniqueWithoutMoviesInput {
  where: CastWhereUniqueInput!
  update: CastUpdateWithoutMoviesDataInput!
  create: CastCreateWithoutMoviesInput!
}

input CastWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  movies_every: MovieWhereInput
  movies_some: MovieWhereInput
  movies_none: MovieWhereInput
  AND: [CastWhereInput!]
  OR: [CastWhereInput!]
  NOT: [CastWhereInput!]
}

input CastWhereUniqueInput {
  id: ID
}

enum Genre {
  DRAMA
  ACTION
  COMEDY
  ROMANCE
  SCIFI
}

scalar Long

type Movie {
  id: ID!
  name: String!
  description: String!
  cast(where: CastWhereInput, orderBy: CastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cast!]
  genre: [Genre!]!
}

type MovieConnection {
  pageInfo: PageInfo!
  edges: [MovieEdge]!
  aggregate: AggregateMovie!
}

input MovieCreategenreInput {
  set: [Genre!]
}

input MovieCreateInput {
  id: ID
  name: String!
  description: String!
  cast: CastCreateManyWithoutMoviesInput
  genre: MovieCreategenreInput
}

input MovieCreateManyWithoutCastInput {
  create: [MovieCreateWithoutCastInput!]
  connect: [MovieWhereUniqueInput!]
}

input MovieCreateWithoutCastInput {
  id: ID
  name: String!
  description: String!
  genre: MovieCreategenreInput
}

type MovieEdge {
  node: Movie!
  cursor: String!
}

enum MovieOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type MoviePreviousValues {
  id: ID!
  name: String!
  description: String!
  genre: [Genre!]!
}

input MovieScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  NOT: [MovieScalarWhereInput!]
}

type MovieSubscriptionPayload {
  mutation: MutationType!
  node: Movie
  updatedFields: [String!]
  previousValues: MoviePreviousValues
}

input MovieSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MovieWhereInput
  AND: [MovieSubscriptionWhereInput!]
  OR: [MovieSubscriptionWhereInput!]
  NOT: [MovieSubscriptionWhereInput!]
}

input MovieUpdategenreInput {
  set: [Genre!]
}

input MovieUpdateInput {
  name: String
  description: String
  cast: CastUpdateManyWithoutMoviesInput
  genre: MovieUpdategenreInput
}

input MovieUpdateManyDataInput {
  name: String
  description: String
  genre: MovieUpdategenreInput
}

input MovieUpdateManyMutationInput {
  name: String
  description: String
  genre: MovieUpdategenreInput
}

input MovieUpdateManyWithoutCastInput {
  create: [MovieCreateWithoutCastInput!]
  delete: [MovieWhereUniqueInput!]
  connect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  disconnect: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutCastInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutCastInput!]
  deleteMany: [MovieScalarWhereInput!]
  updateMany: [MovieUpdateManyWithWhereNestedInput!]
}

input MovieUpdateManyWithWhereNestedInput {
  where: MovieScalarWhereInput!
  data: MovieUpdateManyDataInput!
}

input MovieUpdateWithoutCastDataInput {
  name: String
  description: String
  genre: MovieUpdategenreInput
}

input MovieUpdateWithWhereUniqueWithoutCastInput {
  where: MovieWhereUniqueInput!
  data: MovieUpdateWithoutCastDataInput!
}

input MovieUpsertWithWhereUniqueWithoutCastInput {
  where: MovieWhereUniqueInput!
  update: MovieUpdateWithoutCastDataInput!
  create: MovieCreateWithoutCastInput!
}

input MovieWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  cast_every: CastWhereInput
  cast_some: CastWhereInput
  cast_none: CastWhereInput
  AND: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  NOT: [MovieWhereInput!]
}

input MovieWhereUniqueInput {
  id: ID
}

type Mutation {
  createCast(data: CastCreateInput!): Cast!
  updateCast(data: CastUpdateInput!, where: CastWhereUniqueInput!): Cast
  updateManyCasts(data: CastUpdateManyMutationInput!, where: CastWhereInput): BatchPayload!
  upsertCast(where: CastWhereUniqueInput!, create: CastCreateInput!, update: CastUpdateInput!): Cast!
  deleteCast(where: CastWhereUniqueInput!): Cast
  deleteManyCasts(where: CastWhereInput): BatchPayload!
  createMovie(data: MovieCreateInput!): Movie!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updateManyMovies(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): BatchPayload!
  upsertMovie(where: MovieWhereUniqueInput!, create: MovieCreateInput!, update: MovieUpdateInput!): Movie!
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deleteManyMovies(where: MovieWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cast(where: CastWhereUniqueInput!): Cast
  casts(where: CastWhereInput, orderBy: CastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cast]!
  castsConnection(where: CastWhereInput, orderBy: CastOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CastConnection!
  movie(where: MovieWhereUniqueInput!): Movie
  movies(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Movie]!
  moviesConnection(where: MovieWhereInput, orderBy: MovieOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MovieConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  cast(where: CastSubscriptionWhereInput): CastSubscriptionPayload
  movie(where: MovieSubscriptionWhereInput): MovieSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  username: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  username: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  username: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  username: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  username: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    